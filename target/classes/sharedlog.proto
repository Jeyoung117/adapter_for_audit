syntax = "proto3";

//import "google/protobuf/empty.proto";
//import "google/protobuf/timestamp.proto";

option java_multiple_files = true;
option java_outer_classname = "adapterservice";
//option java_package = "org.sslab.adapter";
option java_package = "org.hyperledger.fabric.protos.peer";
//option java_package = "proto";
option go_package = "github.com/hyperledger/fabric-protos-go/peer";


package org.sslab.adapter;

import "proposal_response.proto";

message ReqCheck {
    string channelID = 1;
    string chaincodeID = 2;
    bytes key = 3;
}

message ResCheck {
    uint64 checkresult = 1;
}

message ObjectRequest {
    string objectname = 1;
    string keyvalue = 2;
}

message ReqAppend {
    string ChannelID = 1;
    string chaincodeID = 2;
//    string objectname = 3;
    bytes txContext = 3;
    bytes payload = 4;
    bytes writeset = 5;
    bytes readset = 6;
}


message ResAppend {
    uint64 logicalAddr = 1;
    bool success = 2;
    bytes txContext = 3;
}

message ReqRead {
    string ChannelID = 1;
    string chaincodeID = 2;
    string objectname = 3;
}

message ResRead {
    string ChannelID = 1;
    string chaincodeID = 2;
    string objectname = 3;
    bytes txContext = 4;
    uint64 version = 5;
}

message ReqTxcont {
    string temp = 1;
}

message SuccessResponse {
    string SuccessMessage = 1;
}

//for test in vCorfu environment
message ReqGet {
    string ChannelID = 1;
    string chaincodeID = 2;
    string objectname = 3;
}

message ResGet {
    bytes data = 1;
    uint64 version = 2;
}

message ReqPut {
    string ChannelID = 1;
    string chaincodeID = 2;
    string objectname = 3;
    bytes data = 4;
}

message ResPut {
    string successmessage = 1;
}

message ReqCommit {
    string test = 1;
}

message ResCommit {
    uint64 logicalAddr = 1;
    bool success = 2;
}

service CorfuConnect {
    rpc SendTransaction(ReqAppend) returns (ResAppend);
    rpc IssueSnapshotToken(ReqTxcont) returns (SuccessResponse);
    rpc GetTransaction(ReqRead) returns (ResRead);
    rpc CheckVersion(ReqCheck) returns (ResCheck);
    rpc getStringState(ReqGet) returns (ResGet);
    rpc putStringState(ReqPut) returns (ResPut);
    rpc CommitTransaction(ProposalResponse) returns (ResCommit);
//    rpc CommitTransaction(ReqCommit) returns (ResCommit);
}