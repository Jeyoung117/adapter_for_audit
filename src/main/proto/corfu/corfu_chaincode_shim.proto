// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";
option java_package = "org.hyperledger.fabric.protos.corfu";
//option go_package = "github.com/hyperledger/fabric-protos-go/peer";

package protos;

import "peer/chaincode_event.proto";
import "peer/proposal.proto";
import "google/protobuf/timestamp.proto";

message CorfuChaincodeMessage {
  enum Type {
    UNDEFINED = 0;
    REGISTER = 1;
    REGISTERED = 2;
    INIT = 3;
    READY = 4;
    TRANSACTION = 5;
    COMPLETED = 6;
    ERROR = 7;
    GET_STATE = 8;
    PUT_STATE = 9;
    DEL_STATE = 10;
    INVOKE_CHAINCODE = 11;
    RESPONSE = 13;
    GET_STATE_BY_RANGE = 14;
    GET_QUERY_RESULT = 15;
    QUERY_STATE_NEXT = 16;
    QUERY_STATE_CLOSE = 17;
    KEEPALIVE = 18;
    GET_HISTORY_FOR_KEY = 19;
    GET_STATE_METADATA = 20;
    PUT_STATE_METADATA = 21;
    GET_PRIVATE_DATA_HASH = 22;
  }

  Type type = 1;
  google.protobuf.Timestamp timestamp = 2;
  bytes payload = 3;
  string txid = 4;

  SignedProposal proposal = 5;

  //event emitted by chaincode. Used only with Init or Invoke.
  // This event is then stored (currently)
  //with Block.NonHashData.TransactionResult
  ChaincodeEvent chaincode_event = 6;



  //channel id
  string channel_id = 8;
}
// compatibility upon upgrade, see FAB-5777.

// GetState is the payload of a ChaincodeMessage. It contains a key which
// is to be fetched from the ledger. If the collection is specified, the key
// would be fetched from the collection (i.e., private state)
message CorfuGetState {
  string key = 1;
  string collection = 2;
}

message CorfuGetStateMetadata {
  string key = 1;
  string collection = 2;
}

// PutState is the payload of a ChaincodeMessage. It contains a key and value
// which needs to be written to the transaction's write set. If the collection is
// specified, the key and value would be written to the transaction's private
// write set.
message CorfuPutState {
  string key = 1;
  bytes value = 2;
  string collection = 3;
}

message CorfuPutStateMetadata {
  string key = 1;
  string collection = 3;
  CorfuStateMetadata metadata = 4;
}

// DelState is the payload of a ChaincodeMessage. It contains a key which
// needs to be recorded in the transaction's write set as a delete operation.
// If the collection is specified, the key needs to be recorded in the
// transaction's private write set as a delete operation.
message CorfuDelState {
  string key = 1;
  string collection = 2;
}

// GetStateByRange is the payload of a ChaincodeMessage. It contains a start key and
// a end key required to execute range query. If the collection is specified,
// the range query needs to be executed on the private data. The metadata hold
// the byte representation of QueryMetadata.
message CorfuGetStateByRange {
  string startKey = 1;
  string endKey = 2;
  string collection = 3;
  bytes metadata = 4;
}

// GetQueryResult is the payload of a ChaincodeMessage. It contains a query
// string in the form that is supported by the underlying state database.
// If the collection is specified, the query needs to be executed on the
// private data.  The metadata hold the byte representation of QueryMetadata.
message CorfuGetQueryResult {
  string query = 1;
  string collection = 2;
  bytes metadata = 3;
}

// QueryMetadata is the metadata of a GetStateByRange and GetQueryResult.
// It contains a pageSize which denotes the number of records to be fetched
// and a bookmark.
message CorfuQueryMetadata {
  int32 pageSize = 1;
  string bookmark = 2;
}

// GetHistoryForKey is the payload of a ChaincodeMessage. It contains a key
// for which the historical values need to be retrieved.
message CorfuGetHistoryForKey {
  string key = 1;
}

message CorfuQueryStateNext {
  string id = 1;
}

message CorfuQueryStateClose {
  string id = 1;
}

// QueryResultBytes hold the byte representation of a record returned by the peer.
message CorfuQueryResultBytes {
  bytes resultBytes = 1;
}

// QueryResponse is returned by the peer as a result of a GetStateByRange,
// GetQueryResult, and GetHistoryForKey. It holds a bunch of records in
// results field, a flag to denote whether more results need to be fetched from
// the peer in has_more field, transaction id in id field, and a QueryResponseMetadata
// in metadata field.
message CorfuQueryResponse {
  repeated CorfuQueryResultBytes results = 1;
  bool has_more = 2;
  string id = 3;
  bytes metadata = 4;
}

// QueryResponseMetadata is the metadata of a QueryResponse. It contains a count
// which denotes the number of records fetched from the ledger and a bookmark.
message CorfuQueryResponseMetadata {
  int32 fetched_records_count = 1;
  string bookmark = 2;
}

message CorfuStateMetadata {
  string metakey = 1;
  bytes value = 2;
}

message CorfuStateMetadataResult {
  repeated CorfuStateMetadata entries = 1;
}


// Interface that provides support to chaincode execution. ChaincodeContext
// provides the context necessary for the server to respond appropriately.
service CorfuChaincodeSupport {
  rpc Register(stream CorfuChaincodeMessage) returns (stream CorfuChaincodeMessage);
}

// Chaincode as a server - peer establishes a connection to the chaincode as a client
// Currently only supports a stream connection.
service CorfuChaincode {
  rpc Connect(stream CorfuChaincodeMessage) returns (stream CorfuChaincodeMessage);
}
